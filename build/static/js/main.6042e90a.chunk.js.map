{"version":3,"sources":["services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","transacntion","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","section","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6042e90a.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'http://localhost:3000/api',\n})","import { type } from 'node:os';\nimport { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\n\ninterface Transaction {\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\n// interface TransactionInput {\n//     title: string;\n//     amount: number;\n//     type: string;\n//     category: string;\n// }\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\n// type TransactionInput = Pick<Transaction, 'title' | 'amount' | 'type' | 'category'>;\n\ninterface TransactionsProviderProps {\n    children: ReactNode;\n}\n\ninterface TransactionsContextData {\n    transactions: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n        {} as TransactionsContextData\n    );\n\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n    const [ transactions, setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n        api.get('transactions')\n            .then(response => setTransactions(response.data.transactions))\n    }, []);\n\n    async function createTransaction(transactionInput: TransactionInput) {\n       const response = await api.post('/transactions', { \n           ...transactionInput,\n            createdAt: new Date(),\n        });\n       const { transaction } = response.data;\n\n       setTransactions([\n           ...transactions,\n           transaction,\n       ]);\n    }\n\n    return (\n        <TransactionsContext.Provider value={{ transactions, createTransaction}}>\n            {children}\n        </TransactionsContext.Provider>\n    );\n}\n\nexport function useTransactions() {\n    const context = useContext(TransactionsContext);\n\n    return context;\n} ","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -10rem;\n\n    div {\n        background: var(--shape);\n        padding: 1.5rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n\n        header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        strong {\n            display: block;\n            margin-top: 1rem;\n            font-size: 2rem;\n            line-height: 3rem;\n            font-weight: 500;\n        }\n\n        &.highlight-background {\n            background: var(--green);\n            color: var(--shape);\n        }\n\n    }\n`;","import React from 'react';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport totalImg from '../../assets/total.svg'\n\nimport { Container } from \"./styles\";\n\nexport function Summary() {\n    const { transactions } = useTransactions();\n\n    const summary = transactions.reduce((acc, transacntion) => {\n        if (transacntion.type === 'deposit') {\n            acc.deposits += transacntion.amount; \n            acc.total += transacntion.amount;\n        } else {\n            acc.withdraws += transacntion.amount;\n            acc.total -= transacntion.amount;\n        }\n\n        return acc;\n    }, {\n        deposits: 0,\n        withdraws: 0,\n        total: 0,\n    })\n\n    return (\n        <Container>\n\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={incomeImg} alt=\"Entradas\"/>\n                </header>\n                <strong>\n                {new Intl.NumberFormat('pt-BR', {\n                    style: 'currency',\n                    currency: 'BRL'\n                }).format(summary.deposits)}\n                </strong>\n            </div>\n            <div>\n                <header>\n                    <p>Saídas</p>\n                    <img src={outcomeImg} alt=\"Saídas\"/>\n                </header>\n                <strong>\n                - {new Intl.NumberFormat('pt-BR', {\n                    style: 'currency',\n                    currency: 'BRL'\n                }).format(summary.withdraws)}\n                </strong>\n            </div>\n            <div className=\"highlight-background\">\n                <header>\n                    <p>Total</p>\n                    <img src={totalImg} alt=\"Total\"/>\n                </header>\n                <strong>\n                {new Intl.NumberFormat('pt-BR', {\n                    style: 'currency',\n                    currency: 'BRL'\n                }).format(summary.total)}    \n                </strong>\n            </div>\n        </Container>\n\n    )\n}","import styled from \"styled-components\";\n\n\nexport const Container = styled.div`\n    margin-top: 4rem;\n\n    table {\n        width: 100%;\n        border-spacing: 0 0.5rem;\n\n        th {\n            color: var(--text-body);\n            font-weight: 400;\n            padding: 1rem 2rem;\n            text-align: left;\n            line-height: 1.5rem;\n        }\n\n        td {\n            padding: 1rem 2rem;\n            border: 0;\n            background: var(--shape);\n            color: var(--text-body);\n            border-radius: 0.25rem;\n            \n            &:first-child {\n                color: var(--text-title);\n            }\n\n            &.deposit {\n                color: var(--green);\n            }\n\n            &.widthraw {\n                color: var(--red);\n            }\n\n        }\n    }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\n\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n    const { transactions } = useTransactions();    \n\n    return (\n        <Container>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Título</th>\n                        <th>Valor</th>\n                        <th>Categoria</th>\n                        <th>Data</th>\n                    </tr>\n                </thead>\n                \n                <tbody>\n                    {transactions.map(transaction => (\n                        <tr key={transaction.id}>\n                            <td>{transaction.title}</td>\n                            <td className={transaction.type}>\n                                {new Intl.NumberFormat('pt-BR', {\n                                    style: 'currency',\n                                    currency: 'BRL'\n                                }).format(transaction.amount)}\n                            </td>\n                            <td>{transaction.category}</td>\n                            <td>\n                            {new Intl.DateTimeFormat('pt-BR').format(\n                                new Date(transaction.createdAt))}</td>\n                        </tr>                        \n                    ))}\n                </tbody>\n            </table>\n        </Container>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.section`\n        max-width: 1120px;\n        margin: 0 auto;\n        padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard() {\n    return (\n        <Container>\n            <Summary />\n            <TransactionsTable />\n        </Container>\n    );\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.header `\n    background: var(--blue);\n`;\n\nexport const Content = styled.div `\n    max-width: 1120px;\n    margin: 0 auto;\n\n    padding: 2rem 1rem 12rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n        font-size: 1rem;\n        color: var(--shape);\n        font-weight: 600;\n        background: var(--blue-light);\n        border: 0;\n        padding: 0 2rem;\n        border-radius: 0.25rem;\n        height: 3rem;\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n    }\n`;","import { useState } from 'react';\nimport Modal from 'react-modal';\nimport logoImg from '../../assets/logo.svg';\nimport { Container, Content } from './styles';\n\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void;\n}\n\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n   \n\n    return (\n        <Container>\n            <Content>\n                <img src={logoImg} alt=\"dt money\"/>\n                <button type=\"button\" onClick={onOpenNewTransactionModal}>\n                    Nova transação\n                </button>\n            </Content>\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components';\nimport { darken, transparentize } from 'polished';\n\nexport const Container = styled.form`\n    h2 {\n        color: var(--text-title);\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n    }\n\n    input {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        border-radius: 0.25rem;\n\n        border: 1px solid var(--border-input);\n        background: var(--background-input);\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder {\n            color: var(--text-body);\n\n        }\n\n        & + input {\n            margin-top: 1rem;\n        }\n    }\n\n    button[type=submit] {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        background: var(--green);\n        color: var(--shape);\n        border-radius: 0.25rem;\n        border: 0;\n        font-size: 1rem;\n        font-weight: 600;\n        margin-top: 1.5rem;\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n    }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n`;\n\ninterface RadioBoxProps {\n    isActive: boolean;\n    activeColor: 'green' | 'red';\n}\n\nconst colors = {\n    green: '#33CC95',\n    red: '#E52E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n\nheight: 4rem;\n        border: 1px solid var(--border-input);\n        border-radius: 0.25rem;\n\n        background: ${(props) => props.isActive \n            ? transparentize(0.9, colors[props.activeColor])\n            : 'transparent'\n        };\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        transition: border-color 0.2s;\n\n        &:hover {\n            border-color: ${darken(0.1, `#D7D7D7`)};\n        }\n\n        img {\n            width: 20px;\n            height: 20px;\n        }\n\n        span {\n            display: inline-block;\n            margin-left: 1rem;\n            font-size: 1rem;\n            color: var(--text-title);\n        }\n`;","import { FormEvent, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\n\nimport { Container, TransactionTypeContainer, RadioBox } from \"./styles\";\n\ninterface NewTransactionModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n    const { createTransaction } = useTransactions();\n    \n    const [title, setTitle] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [category, setCategory] = useState('');\n    const [type, setType ] = useState('deposit');\n\n    async function handleCreateNewTransaction(event: FormEvent) {\n        event.preventDefault();\n\n      await createTransaction({\n            title,\n            amount,\n            category,\n            type,\n        }) \n\n        setTitle('');\n        setAmount(0);\n        setCategory('');\n        setType('deposit');\n        onRequestClose();\n    }\n\n    return (\n        <Modal \n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n            overlayClassName=\"react-modal-overlay\"            \n            className=\"react-modal-content\"\n        >\n            <button \n                type=\"submit\" \n                onClick={onRequestClose} \n                className=\"react-modal-close\">\n\n                <img src={closeImg} alt=\"Fechar modal\"/>\n\n            </button>\n\n            <Container onSubmit={handleCreateNewTransaction}>\n                <h2>Cadastrar transação</h2>\n\n                <input \n                    placeholder=\"Título\"\n                    value={title}\n                    onChange={event => setTitle(event.target.value)} \n                />\n                \n                <input \n                    type=\"number\" \n                    placeholder=\"Valor\"\n                    value={amount}\n                    onChange={event => setAmount(Number(event.target.value))} \n                />\n                \n                <TransactionTypeContainer>\n                    \n                    <RadioBox \n                        type=\"button\"\n                        onClick={() => { setType('deposit'); }}\n                        isActive={type === 'deposit'}\n                        activeColor=\"green\"\n                    >\n                        <img src={incomeImg} alt=\"Entrada\"/>\n                        <span>Entrada</span>\n                    </RadioBox>\n\n                    <RadioBox \n                        type=\"button\"\n                        onClick={() => { setType('widthraw'); }}\n                        isActive={type === 'widthraw'}\n                        activeColor=\"red\"\n                    >\n                        <img src={outcomeImg} alt=\"Saída\"/>\n                        <span>Saída</span>\n                    </RadioBox>\n\n                </TransactionTypeContainer>\n\n                <input \n                    placeholder=\"Categoria\"\n                    value={category}\n                    onChange={event => setCategory(event.target.value)}  \n                />\n                \n                <button type=\"submit\">\n                    Cadastrar\n                </button>\n            </Container>\n      </Modal>   \n    );\n}","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n:root {\n    --background: #F0F2F5;\n    --red: #E52E4D;\n    --green: #33CC95;\n    --blue: #5429CC;\n\n    --blue-light: #6933FF;\n\n    --text-title: #363F5F;\n    --text-body: #969CB3;\n\n    --background-input: #E7E9EE;\n    --border-input: #D7D7D7;\n\n    --shape: #FFFFFF;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    @media (max-width: 1080px) {\n        font-size: 93.75%;\n    }\n\n    @media (max-width: 720px) {\n        font-size: 87.5%;\n    }\n}\n\nbody {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased; \n}\n\nbody, input, textarea, input, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n}\n\nh1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n}\n\nbutton {\n    cursor: pointer;\n}\n\n[disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n.react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n}\n\n.react-modal-close {\n    position: absolute;\n    top: 1.5rem;\n    right: 1.5rem;\n    border: 0;\n    background: transparent;\n    transition: filter 0.2s;\n\n    &hover {\n        filter: brightness(0.8);\n    }\n}\n\n`","import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { TransactionsProvider } from \"./hooks/useTransactions\";\n\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n      setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n      setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n      <NewTransactionModal \n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />     \n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\nseeds(server) {\n  server.db.loadData({\n    transactions: [\n      {\n        id: 1,\n        title: 'Freelance de website',\n        type: 'deposit',\n        category: 'Dev',\n        amount: 6000,\n        createdAt: new Date('2021-02-14 10:22:01'),\n      },\n      {\n        id: 2,\n        title: 'Aluguel',\n        type: 'withdraw',\n        category: 'Casa',\n        amount: 1100,\n        createdAt: new Date('2021-01-31 07:27:01'),\n      },\n    ]\n  })\n},\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create('transaction', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}